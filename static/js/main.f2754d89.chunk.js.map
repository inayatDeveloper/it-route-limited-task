{"version":3,"sources":["reducers/contacts.js","constant/index.js","reducers/index.js","store/index.js","actions/contacts.js","components/contact-list.js","utils/index.js","components/add-new-contact.js","components/edit-contact.js","components/contact-view.js","routes/index.js","serviceWorker.js","index.js"],"names":["initialstate","Contacts","id","Name","Email","CreatedDate","ModifiedDate","state","action","type","concat","data","filter","item","map","content","i","allreducers","combineReducers","store","createStore","mapStateToProps","mapDispatchToProps","dispatch","getContactList","addNewContact","deleteContact","saveEditContact","withRouter","connect","props","useEffect","className","style","margin","onClick","history","push","scope","info","index","key","e","window","confirm","dateTime","today","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","useState","name","setName","email","setEmail","class","placeholder","value","onChange","target","length","getEditInfo","match","params","getContactInfo","Routes","Store","exact","path","component","ContactList","AddnewContact","EditContact","ContactView","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f2754d89.chunk.js","sourcesContent":["import {\r\n  GetContact,\r\n  EditContact,\r\n  AddContact,\r\n  DeleteContact,\r\n} from \"../constant\";\r\n\r\nconst initialstate = {\r\n  Contacts: [\r\n    {\r\n      id: 1,\r\n      Name: \"Inayat\",\r\n      Email: \"Inayat@gmail.com\",\r\n      CreatedDate: \"2020-5-4 5:0:21\",\r\n      ModifiedDate: \"2020-5-4 7:0:21\",\r\n    },\r\n    {\r\n      id: 2,\r\n      Name: \"Ali\",\r\n      Email: \"Ali@gmail.com\",\r\n      CreatedDate: \"2020-5-4 4:0:21\",\r\n      ModifiedDate: \"2020-5-4 8:0:21\",\r\n    },\r\n  ],\r\n};\r\nconst Contacts = (state = initialstate, action) => {\r\n  switch (action.type) {\r\n    case GetContact:\r\n      return {\r\n        ...state,\r\n      };\r\n    case AddContact:\r\n      return {\r\n        ...state,\r\n        Contacts: state.Contacts.concat(action.data),\r\n      };\r\n    case DeleteContact:\r\n      return {\r\n        ...state,\r\n        Contacts: state.Contacts.filter((item) => item.id !== action.id),\r\n      };\r\n    case EditContact:\r\n      return {\r\n        ...state,\r\n        Contacts: state.Contacts.map((content, i) =>\r\n          content.id == action.data.id\r\n            ? {\r\n                ...content,\r\n                Name: action.data.Name,\r\n                Email: action.data.Email,\r\n                ModifiedDate: action.data.ModifiedDate,\r\n              }\r\n            : content\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default Contacts;\r\n","export const GetContact = \"GET_CONTACT_LIST\";\r\nexport const EditContact = \"EDIT_CONTACT\";\r\nexport const AddContact = \"ADD_NEW_CONTACT\";\r\nexport const DeleteContact = \"DELETE_CONTACT\";\r\n","import { combineReducers } from \"redux\";\r\nimport Contacts from \"./contacts\";\r\nconst allreducers = combineReducers({\r\n  Contacts: Contacts,\r\n});\r\n\r\nexport default allreducers;\r\n","import { createStore } from \"redux\";\r\nimport allreducers from \"../reducers\";\r\n\r\nconst store = createStore(allreducers);\r\n\r\nexport default store;\r\n","import {\r\n  GetContact,\r\n  EditContact,\r\n  AddContact,\r\n  DeleteContact,\r\n} from \"../constant\";\r\nexport const mapStateToProps = (state) => {\r\n  return { Contacts: state.Contacts };\r\n};\r\n\r\nexport const mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getContactList: () => {\r\n      dispatch({ type: GetContact });\r\n    },\r\n\r\n    addNewContact: (data) => {\r\n      dispatch({ type: AddContact, data });\r\n    },\r\n\r\n    deleteContact: (id) => {\r\n      dispatch({ type: DeleteContact, id });\r\n    },\r\n\r\n    saveEditContact: (data) => {\r\n      dispatch({ type: EditContact, data });\r\n    },\r\n  };\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"../actions/contacts\";\r\nconst ContactList = (props) => {\r\n  useEffect(() => {\r\n    props.getContactList();\r\n  }, []);\r\n\r\n  const deleteContact = (e, id) => {\r\n    if (window.confirm(\"Are you want to delete contact ?\")) {\r\n      props.deleteContact(id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <button\r\n        style={{ margin: \"20px 0px\" }}\r\n        className=\"btn btn-primary\"\r\n        onClick={() => props.history.push(\"/add\")}\r\n      >\r\n        AddNew\r\n      </button>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Name</th>\r\n            <th scope=\"col\">Email</th>\r\n            <th scope=\"col\">Date Created</th>\r\n            <th scope=\"col\">Date Modified</th>\r\n            <th scope=\"col\">Show Details</th>\r\n            <th scope=\"col\">Edit</th>\r\n            <th scope=\"col\">Delete</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.Contacts.Contacts.map((info, index) => (\r\n            <tr key={index}>\r\n              <td>{info.Name}</td>\r\n              <td>{info.Email}</td>\r\n              <td>{info.CreatedDate}</td>\r\n              <td>{info.ModifiedDate}</td>\r\n              <td>\r\n                <button\r\n                  className=\"btn btn-info\"\r\n                  onClick={(e) => props.history.push(\"/details/\" + info.id)}\r\n                >\r\n                  Show\r\n                </button>\r\n              </td>\r\n\r\n              <td>\r\n                <button\r\n                  className=\"btn btn-primary\"\r\n                  onClick={(e) => props.history.push(\"/edit/\" + info.id)}\r\n                >\r\n                  edit\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  className=\"btn btn-danger\"\r\n                  onClick={(e) => deleteContact(e, info.id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(ContactList)\r\n);\r\n","const dateTime = () => {\r\n  let today = new Date(),\r\n    date =\r\n      today.getFullYear() +\r\n      \"-\" +\r\n      (today.getMonth() + 1) +\r\n      \"-\" +\r\n      today.getDate(),\r\n    time =\r\n      today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds(),\r\n    dateTime = date + \" \" + time;\r\n  return dateTime;\r\n};\r\nexport default dateTime;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport dateTime from \"../utils\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"../actions/contacts\";\r\n\r\nconst AddNewContact = (props) => {\r\n  let [name, setName] = useState(\"\"),\r\n    [email, setEmail] = useState(\"\");\r\n\r\n  const saveContact = () => {\r\n    props.addNewContact({\r\n      id: props.Contacts.Contacts.length + 1,\r\n      Name: name,\r\n      Email: email,\r\n      CreatedDate: dateTime(),\r\n      ModifiedDate: dateTime(),\r\n    });\r\n    props.history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\"></div>\r\n            <div className=\"col-md-4\">\r\n              <h5 class=\"card-title\">Add new Contact</h5>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n              <br />\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                placeholder=\"Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n              <br />\r\n              <button className=\"btn btn-primary\" onClick={() => saveContact()}>\r\n                save\r\n              </button>\r\n            </div>\r\n            <div className=\"col-md-4\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(AddNewContact)\r\n);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport dateTime from \"../utils\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"../actions/contacts\";\r\n\r\nconst EditContact = (props) => {\r\n  let [name, setName] = useState(\"\"),\r\n    [email, setEmail] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    getEditInfo();\r\n  }, []);\r\n\r\n  const getEditInfo = () => {\r\n    props.Contacts.Contacts.filter((info) => {\r\n      if (info.id == props.match.params.id) {\r\n        setName(info.Name);\r\n        setEmail(info.Email);\r\n      }\r\n    });\r\n  };\r\n\r\n  let saveEditContact = () => {\r\n    props.saveEditContact({\r\n      id: props.match.params.id,\r\n      Name: name,\r\n      Email: email,\r\n      ModifiedDate: dateTime(),\r\n    });\r\n    props.history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\"></div>\r\n            <div className=\"col-md-4\">\r\n              <h5 class=\"card-title\">Edit Contact.</h5>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                placeholder=\"Name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n              <br />\r\n              <input\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                placeholder=\"Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n              <br />\r\n              <button\r\n                className=\"btn btn-primary\"\r\n                onClick={() => saveEditContact()}\r\n              >\r\n                save\r\n              </button>\r\n            </div>\r\n            <div className=\"col-md-4\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(EditContact)\r\n);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { mapStateToProps, mapDispatchToProps } from \"../actions/contacts\";\r\n\r\nconst ViewContact = (props) => {\r\n  let [name, setName] = useState(\"\"),\r\n    [email, setEmail] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    getContactInfo();\r\n  }, []);\r\n\r\n  const getContactInfo = () => {\r\n    props.Contacts.Contacts.filter((info) => {\r\n      if (info.id == props.match.params.id) {\r\n        setName(info.Name);\r\n        setEmail(info.Email);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-4\"></div>\r\n            <div className=\"col-md-4\">\r\n              <h5 class=\"card-title\">Contact Info.</h5>\r\n\r\n              <h6>Name:{name}</h6>\r\n              <h6>Email:{email}</h6>\r\n            </div>\r\n            <div className=\"col-md-4\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(ViewContact)\r\n);\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport Store from \"../store\";\r\nimport ContactList from \"../components/contact-list\";\r\nimport AddnewContact from \"../components/add-new-contact\";\r\nimport EditContact from \"../components/edit-contact\";\r\nimport ContactView from \"../components/contact-view\";\r\nconst Routes = (props) => {\r\n  return (\r\n    <Provider store={Store}>\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={ContactList} />} />\r\n          <Route path=\"/add\" component={AddnewContact} />\r\n          <Route path=\"/edit/:id\" component={EditContact} />\r\n          <Route path=\"/details/:id\" component={ContactView} />\r\n        </Switch>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Routes from \"./routes\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Routes />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}